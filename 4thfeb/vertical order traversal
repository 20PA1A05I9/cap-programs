class Tuple{
     TreeNode node;
     int row;
     int col;
     Tuple(TreeNode node,int row,int col){
         this.node=node;
         this.row=row;
         this.col=col;
     }
 }
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>>map=new TreeMap<>();
        Queue<Tuple>q=new LinkedList<>();
        q.offer(new Tuple(root,0,0));
        while(!q.isEmpty()){
            Tuple t=q.poll();
            TreeNode temp=t.node;
            int x=t.row;
            int y=t.col;
            if(!map.containsKey(x)){
                map.put(x,new TreeMap<>());
            }
            if(!map.get(x).containsKey(y)){
                map.get(x).put(y,new PriorityQueue<>());
            }
            map.get(x).get(y).offer(temp.val);
            if(temp.left!=null){
                q.offer(new Tuple(temp.left,x-1,y+1));
            }
            if(temp.right!=null){
                q.offer(new Tuple(temp.right,x+1,y+1));
            }
        }
        ArrayList<List<Integer>>data=new ArrayList<>();
        for(TreeMap<Integer,PriorityQueue<Integer>>t:map.values()){
            ArrayList<Integer>list=new ArrayList<>();
            for(PriorityQueue<Integer>p:t.values()){
                while(!p.isEmpty()){
                    int val=p.poll();
                    list.add(val);
                }
            }
            data.add(list);
        }
        return data;
    }
}
