class Solution {
    private void pointer(TreeNode root,Map<TreeNode,TreeNode>map){
        Queue<TreeNode>q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode temp=q.poll();
            if(temp.left!=null){
                map.put(temp.left,temp);
                q.offer(temp.left);
            }
            if(temp.right!=null){
                map.put(temp.right,temp);
                q.offer(temp.right);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        ArrayList<Integer>data=new ArrayList<>();
        if(root==null){
            return data;
        }
        HashMap<TreeNode,TreeNode>parent=new HashMap<>();
        pointer(root,parent);
        Queue<TreeNode>q=new LinkedList<>();
        q.offer(target);
        HashSet<TreeNode>set=new HashSet<>();
        set.add(target);
        int count=0;
        while(!q.isEmpty()){
            int size=q.size();
            if(count==k){
                break;
            }
            count++;
            for(int i=0;i<size;i++){
                TreeNode temp=q.poll();
            if(temp.left!=null&&!set.contains(temp.left)){
                q.offer(temp.left);
                set.add(temp.left);
            }
            if(temp.right!=null&&!set.contains(temp.right)){
                q.offer(temp.right);
                set.add(temp.right);
            }
            if(parent.get(temp)!=null&&!set.contains(parent.get(temp))){
                set.add(parent.get(temp));
                q.offer(parent.get(temp));
            }
            }
        }
        for(TreeNode t:q){
            data.add(t.val);
        }
        return data;
        
    }
}
