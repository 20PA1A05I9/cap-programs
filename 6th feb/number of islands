class Solution {
    private void dfs(char[][]grid,boolean[][]vis,int row,int col){
        int m=grid.length,n=grid[0].length;
        vis[row][col]=true;
        if(row-1>=0&&!vis[row-1][col]&&grid[row-1][col]=='1'){
            dfs(grid,vis,row-1,col);
        }
        if(col-1>=0&&!vis[row][col-1]&&grid[row][col-1]=='1'){
            dfs(grid,vis,row,col-1);
        }
        if(row+1<m&&!vis[row+1][col]&&grid[row+1][col]=='1'){
            dfs(grid,vis,row+1,col);
        }
        if(col+1<n&&!vis[row][col+1]&&grid[row][col+1]=='1'){
            dfs(grid,vis,row,col+1);
        }
    }
    public int numIslands(char[][] grid) {
        int m=grid.length,n=grid[0].length;
        boolean [][]vis=new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!vis[i][j]&&grid[i][j]=='1'){
                    dfs(grid,vis,i,j);
                    count++;
                }
            }
        }
        return count;
    }
}
