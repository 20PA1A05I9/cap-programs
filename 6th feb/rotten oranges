class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<Pair>q=new LinkedList<>();
        int count=0;
        int m=grid.length,n=grid[0].length;
        int track=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.offer(new Pair(i,j));
                }
                if(grid[i][j]==1){
                    track++;
                }
            }
        }
        int []left={0,0,1,-1};
        int[]right={1,-1,0,0};
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                Pair p=q.poll();
                int row=p.row,column=p.column;
                for(int k=0;k<4;k++){
                    int r=row+left[k],c=column+right[k];
                    if(r<0||c<0||r>=m||c>=n||grid[r][c]!=1){
                        continue;
                    }
                    q.offer(new Pair(r,c));
                    if(grid[r][c]==1){
                        track--;
                        }
                    grid[r][c]=2;
                }
            }
            if(q.size()>0){
                count++;
            }
        }
        if(track!=0){
            return -1;
        }
        return count;
    }
    static class Pair{
        int row,column;
        Pair(int row,int column){
            this.row=row;
            this.column=column;
         }
    }
}
