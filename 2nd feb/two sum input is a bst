public class BSTIterator{
    private Stack<TreeNode>s=new Stack<>();
    boolean reverse=true;
    public BSTIterator(TreeNode node,boolean b){
        reverse=b;
        pushall(node);
    }
    void pushall(TreeNode node){
        while(node!=null){
            s.push(node);
            if(!reverse){
                node=node.left;
            }
            else{
                node=node.right;
            }
        }
    }
    int next(){
        TreeNode temp=s.pop();
        if(!reverse){
            pushall(temp.right);
        }
        pushall(temp.left);
        return temp.val;
    }
}
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        if(root==null){
            return false;
        }
        BSTIterator l=new BSTIterator(root,false);
        BSTIterator r=new BSTIterator(root,true);
        int i=l.next(),j=r.next();
        while(i<j){
            if(i+j==k){
                return true;
            }
            else if(i+j>k){
                j=r.next();
            }
            else{
                i=l.next();
            }
        }
        return false;
    }
}
